name: Deploy to Amazon ECS fargate
on:
  push:
    branches:
      - master
env:
  AWS_REGION: ap-south-1
  ECS_CLUSTER: app_cluster_3
  CONTAINER_NAME: app_3
  ECS_SERVICE: app_service_3
  ECS_TD: .github/workflows/td.json

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          aws-region: "ap-south-1"
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: docker-nodejs-demo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.5

      - name: Terraform Init
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        run: terraform init
        
      - name: Terraform Apply
        id: terraform
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        run: |
          terraform apply -auto-approve -var image_tag=${{ github.sha }}
      - name: Deploy to ECS
        run: |
          # Download the current task definition in JSON format
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition appv3)

          # Extract the container definitions from the task definition JSON
          CONTAINER_DEFINITIONS=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.containerDefinitions')

          # Replace the image tag in each container definition with the latest image tag
          LATEST_IMAGE_TAG=$(echo $IMAGE_TAG)
          UPDATED_CONTAINER_DEFINITIONS=$(echo $CONTAINER_DEFINITIONS | jq --arg LATEST_IMAGE_TAG $LATEST_IMAGE_TAG '.[].image |= sub(":.*"; ":" + $LATEST_IMAGE_TAG)')

          # Update the task definition with the new container definitions
          UPDATED_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --argjson UPDATED_CONTAINER_DEFINITIONS "$UPDATED_CONTAINER_DEFINITIONS" '.taskDefinition.containerDefinitions |= $UPDATED_CONTAINER_DEFINITIONS')

          # Register the updated task definition with ECS
          REGISTER_RESPONSE=$(aws ecs register-task-definition --cli-input-json "$UPDATED_TASK_DEFINITION")
          NEW_TASK_DEFINITION_ARN=$(echo $REGISTER_RESPONSE | jq -r '.taskDefinition.taskDefinitionArn')

          # Update the ECS service to use the new task definition
          aws ecs update-service --service $SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN
          env:
            TASK_DEFINITION_NAME: appv3
            SERVICE_NAME: app_service_test
            IMAGE_TAG: ${{ github.sha }}
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
           
      
      - name: Wait for 3 minutes
        run: sleep 180
      
      - name: Terraform Destroy
        run: terraform apply -destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
          
      
      

     
      

     
